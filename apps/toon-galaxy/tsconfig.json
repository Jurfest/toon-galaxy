{
  "compilerOptions": {
    "target": "es2022",
    // To ensure dependency injection works correctly without issues, we are
    //  using the inject() method instead of constructor-based injection. This
    // is necessary because, with the current settings (ES2022 or higher),
    // constructor-based injection requires a workaround in the tsconfig.json
    // file, where the "useDefineForClassFields" option must be set to false.
    "useDefineForClassFields": true,
    "forceConsistentCasingInFileNames": true,
    "strict": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "esModuleInterop": true
  },
  "files": [],
  "include": [],
  "references": [
    {
      "path": "./tsconfig.editor.json"
    },
    {
      "path": "./tsconfig.app.json"
    },
    {
      "path": "./tsconfig.spec.json"
    }
  ],
  "extends": "../../tsconfig.base.json",
  "angularCompilerOptions": {
    "enableI18nLegacyMessageIdFormat": false,
    "strictInjectionParameters": true,
    "strictInputAccessModifiers": true,
    "strictTemplates": true
  }
}
